//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shat.ShatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShatMessage", Namespace="http://schemas.datacontract.org/2004/07/Cerver")]
    [System.SerializableAttribute()]
    public partial class ShatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string textField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string text {
            get {
                return this.textField;
            }
            set {
                if ((object.ReferenceEquals(this.textField, value) != true)) {
                    this.textField = value;
                    this.RaisePropertyChanged("text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Cerver", ConfigurationName="ShatService.IShat", CallbackContract=typeof(Shat.ShatService.IShatCallback))]
    public interface IShat {
        
        [System.ServiceModel.OperationContractAttribute(Action="Cerver/IShat/GetLastMessages", ReplyAction="Cerver/IShat/GetLastMessagesResponse")]
        Shat.ShatService.ShatMessage[] GetLastMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="Cerver/IShat/GetLastMessages", ReplyAction="Cerver/IShat/GetLastMessagesResponse")]
        System.Threading.Tasks.Task<Shat.ShatService.ShatMessage[]> GetLastMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Cerver/IShat/SendMessage")]
        void SendMessage(Shat.ShatService.ShatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Cerver/IShat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(Shat.ShatService.ShatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Cerver/IShat/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Cerver/IShat/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Cerver/IShat/BroadcastMessage")]
        void BroadcastMessage(Shat.ShatService.ShatMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShatChannel : Shat.ShatService.IShat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShatClient : System.ServiceModel.DuplexClientBase<Shat.ShatService.IShat>, Shat.ShatService.IShat {
        
        public ShatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ShatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ShatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Shat.ShatService.ShatMessage[] GetLastMessages() {
            return base.Channel.GetLastMessages();
        }
        
        public System.Threading.Tasks.Task<Shat.ShatService.ShatMessage[]> GetLastMessagesAsync() {
            return base.Channel.GetLastMessagesAsync();
        }
        
        public void SendMessage(Shat.ShatService.ShatMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Shat.ShatService.ShatMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
